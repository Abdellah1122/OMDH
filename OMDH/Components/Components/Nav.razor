@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<style>
    :root {
        --primary-color: #1957a6;
        --primary-dark: #174c91;
        --secondary-color: #d3612f;
        --secondary-light: #b55227;
        --accent-color: #e8f0ed;
        --danger-color: #d84040;
        --danger-dark: #c53030;
        --gold-accent: #d4c197;
        --light-bg: #F5F5F5;
        --text-dark: #2c3e50;
        --text-medium: #546e7a;
        --text-light: #78909c;
        --border-radius: 6px;
        --box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
        --transition: all 0.3s ease;
    }

    /* Dropdown menu styles */
    .dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: white;
        min-width: 200px;
        box-shadow: var(--box-shadow);
        border-radius: var(--border-radius);
        z-index: 1000;
        overflow: hidden;
        top: 100%;
        left: 0;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    .dropdown-content button {
        width: 100%;
        padding: 12px 16px;
        text-align: left;
        border: none;
        background: none;
        cursor: pointer;
        transition: var(--transition);
        color: var(--text-dark);
        font-size: 0.95rem;
    }

    .dropdown-content button:hover {
        background-color: var(--accent-color);
        color: var(--primary-color);
    }

    .Nv {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 5em;
        position: sticky;
        top: 0;
        z-index: 100;
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(3px);
        transition: background-color 0.3s ease;
    }

    .Nv.scrolled {
        background: rgba(230, 240, 237, 0.95);
        backdrop-filter: blur(7px);
        border-bottom: 1px solid var(--secondary-color);
    }

    .Nv.scrolled .Btnss {
        color: var(--text-dark);
    }

    .logo-container {
        flex-shrink: 0;
    }

    .logo-container img {
        height: 60px;
        width: auto;
        transition: transform 0.3s ease;
    }

    .logo-container img:hover {
        transform: scale(1.05);
    }

    .logo-container .Btnss {
        padding: 0;
        background: transparent;
        border: none;
    }

    .NavBtns {
        display: flex;
        gap: 1.5rem;
        align-items: center;
    }

    .Btnss {
        background-color: transparent;
        border: none;
        color: #ddd;
        font-size: 1.1em;
        font-weight: 500;
        padding: 0.5rem 0.75rem;
        cursor: pointer;
        position: relative;
        transition: color 0.3s ease;
        white-space: nowrap;
    }

    .Btnss:hover {
        color: var(--primary-color);
    }

    .Btnss::after {
        content: '';
        position: absolute;
        width: 0;
        height: 2px;
        bottom: 0;
        left: 50%;
        background-color: var(--primary-dark);
        transition: all 0.3s ease;
    }

    .Btnss:hover::after {
        width: 100%;
        left: 0;
    }

    /* Mobile hamburger menu */
    .mobile-menu-toggle {
        display: none;
        background: none;
        border: none;
        color: #ddd;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0.5rem;
        z-index: 1001;
    }

    .mobile-menu-toggle:hover {
        color: var(--primary-color);
    }

    .mobile-nav-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .mobile-nav-menu {
        display: none;
        position: fixed;
        top: 0;
        right: -100%;
        width: 300px;
        max-width: 80vw;
        height: 100vh;
        background: white;
        box-shadow: -2px 0 20px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        transition: right 0.3s ease;
        overflow-y: auto;
        padding: 2rem 0;
    }

    .mobile-nav-menu.active {
        right: 0;
    }

    .mobile-nav-item {
        width: 100%;
        padding: 1rem 1.5rem;
        text-align: left;
        border: none;
        background: none;
        cursor: pointer;
        transition: var(--transition);
        color: var(--text-dark);
        font-size: 1.1rem;
        font-weight: 500;
        border-bottom: 1px solid #eee;
    }

    .mobile-nav-item:hover {
        background-color: var(--accent-color);
        color: var(--primary-color);
    }

    .mobile-dropdown {
        border-bottom: 1px solid #eee;
    }

    .mobile-dropdown-toggle {
        width: 100%;
        padding: 1rem 1.5rem;
        text-align: left;
        border: none;
        background: none;
        cursor: pointer;
        color: var(--text-dark);
        font-size: 1.1rem;
        font-weight: 500;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .mobile-dropdown-toggle:hover {
        background-color: var(--accent-color);
        color: var(--primary-color);
    }

    .mobile-dropdown-content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.3s ease;
        background-color: #f8f9fa;
    }

    .mobile-dropdown-content.active {
        max-height: 300px;
    }

    .mobile-dropdown-item {
        width: 100%;
        padding: 0.75rem 2rem;
        text-align: left;
        border: none;
        background: none;
        cursor: pointer;
        color: var(--text-medium);
        font-size: 1rem;
        transition: var(--transition);
    }

    .mobile-dropdown-item:hover {
        background-color: var(--accent-color);
        color: var(--primary-color);
    }

    /* Close button for mobile menu */
    .mobile-menu-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--text-medium);
        cursor: pointer;
        padding: 0.5rem;
    }

    .mobile-menu-close:hover {
        color: var(--danger-color);
    }


</style>

<div class="Nv" id="navbar">
    <div class="logo-container">
        <button @onclick="@(() => Navigateto("/"))" class="Btnss">
            <img src="/omdhlogo2.png" alt="Logo" />
        </button>
    </div>
    
    <!-- Desktop Navigation -->
    <div class="NavBtns">
        <div class="dropdown">
            <button class="Btnss">À propos de l'organisation <i class="bi bi-chevron-down"></i></button>
            <div class="dropdown-content">
                <button @onclick="@(() => Navigateto("/about-us"))">Qui sommes-nous</button>
                <button @onclick="@(() => Navigateto("/Missions"))">Nos Missions</button>
                <button @onclick="@(() => Navigateto("/Presence"))">Présence nationale</button>
                <button @onclick="@(() => Navigateto("/Campaigns"))">Nos Campagnes</button>
            </div>
        </div>
        <div class="dropdown">
            <button class="Btnss">Projets <i class="bi bi-chevron-down"></i></button>
            <div class="dropdown-content">
                <button @onclick="@(() => Navigateto("/Projects"))">Tous les projets</button>
                <button @onclick="@(() => Navigateto("/ProjectHCR"))">Projet HCR</button>
            </div>
        </div>
        <button @onclick="@(() => Navigateto("/Team"))" class="Btnss">Notre Équipe</button>
        <button @onclick="@(() => Navigateto("/Editions"))" class="Btnss">Éditions</button>
        <button @onclick="@(() => Navigateto("/Contact"))" class="Btnss">Contact</button>
    </div>

    <!-- Mobile hamburger button -->
    <button class="mobile-menu-toggle" @onclick="ToggleMobileMenu">
        <i class="bi bi-list" id="hamburger-icon"></i>
    </button>

    <!-- Mobile navigation overlay -->
    <div class="mobile-nav-overlay @(isMobileMenuOpen ? "active" : "")" @onclick="CloseMobileMenu"></div>

    <!-- Mobile navigation menu -->
    <div class="mobile-nav-menu @(isMobileMenuOpen ? "active" : "")">
        <button class="mobile-menu-close" @onclick="CloseMobileMenu">
            <i class="bi bi-x-lg"></i>
        </button>
        
        <div class="mobile-dropdown">
            <button class="mobile-dropdown-toggle" @onclick="ToggleAboutDropdown">
                À propos de l'organisation
                <i class="bi @(isAboutDropdownOpen ? "bi-chevron-up" : "bi-chevron-down")"></i>
            </button>
            <div class="mobile-dropdown-content @(isAboutDropdownOpen ? "active" : "")">
                <button class="mobile-dropdown-item" @onclick="@(() => NavigateAndClose("/about-us"))">Qui sommes-nous</button>
                <button class="mobile-dropdown-item" @onclick="@(() => NavigateAndClose("/Missions"))">Missions</button>
                <button class="mobile-dropdown-item" @onclick="@(() => NavigateAndClose("/Presence"))">Présence nationale</button>
                <button class="mobile-dropdown-item" @onclick="@(() => NavigateAndClose("/Campaigns"))">Campagnes</button>
            </div>
        </div>

        <div class="mobile-dropdown">
            <button class="mobile-dropdown-toggle" @onclick="ToggleProjectsDropdown">
                Projets
                <i class="bi @(isProjectsDropdownOpen ? "bi-chevron-up" : "bi-chevron-down")"></i>
            </button>
            <div class="mobile-dropdown-content @(isProjectsDropdownOpen ? "active" : "")">
                <button class="mobile-dropdown-item" @onclick="@(() => NavigateAndClose("/Projects"))">Tous les projets</button>
                <button class="mobile-dropdown-item" @onclick="@(() => NavigateAndClose("/ProjectHCR"))">Projet HCR</button>
            </div>
        </div>

        <button class="mobile-nav-item" @onclick="@(() => NavigateAndClose("/Team"))">Équipe</button>
        <button class="mobile-nav-item" @onclick="@(() => NavigateAndClose("/Editions"))">Éditions</button>
        <button class="mobile-nav-item" @onclick="@(() => NavigateAndClose("/Contact"))">Contact</button>
    </div>
</div>

<script>
    window.initializeNavbarScroll = () => {
        window.addEventListener("scroll", () => {
            let navbar = document.getElementById("navbar");
            if (window.scrollY > window.innerHeight) {
                navbar.classList.add("scrolled");
            } else {
                navbar.classList.remove("scrolled");
            }
        });
    };

    window.updateHamburgerIcon = (isOpen) => {
        const icon = document.getElementById("hamburger-icon");
        if (icon) {
            icon.className = isOpen ? "bi bi-x-lg" : "bi bi-list";
        }
    };
</script>

<script>
    function scrollToElement(className) {
        const element = document.querySelector('.' + className);
        if (element) {
            element.scrollIntoView({ behavior: 'smooth' });
        }
    }
</script>

@code {
    private string scrollToClass = "Introo";
    private string Ourstory = "finddd";
    private bool isMobileMenuOpen = false;
    private bool isAboutDropdownOpen = false;
    private bool isProjectsDropdownOpen = false;

    private async Task ScrollToDiv(string className)
    {
        scrollToClass = className;
        await JSRuntime.InvokeVoidAsync("scrollToElement", scrollToClass);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeNavbarScroll");
        }
    }

    public void Navigateto(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    private async Task NavigateAndClose(string url)
    {
        CloseMobileMenu();
        NavigationManager.NavigateTo(url);
    }

    private async Task ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
        await JSRuntime.InvokeVoidAsync("updateHamburgerIcon", isMobileMenuOpen);
        
        // Close dropdowns when closing menu
        if (!isMobileMenuOpen)
        {
            isAboutDropdownOpen = false;
            isProjectsDropdownOpen = false;
        }
    }

    private void CloseMobileMenu()
    {
        isMobileMenuOpen = false;
        isAboutDropdownOpen = false;
        isProjectsDropdownOpen = false;
        JSRuntime.InvokeVoidAsync("updateHamburgerIcon", isMobileMenuOpen);
    }

    private void ToggleAboutDropdown()
    {
        isAboutDropdownOpen = !isAboutDropdownOpen;
        // Close other dropdown
        isProjectsDropdownOpen = false;
    }

    private void ToggleProjectsDropdown()
    {
        isProjectsDropdownOpen = !isProjectsDropdownOpen;
        // Close other dropdown
        isAboutDropdownOpen = false;
    }
}